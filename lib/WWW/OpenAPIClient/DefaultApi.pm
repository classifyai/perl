=begin comment

Classify

Classify Custom Image Recognition Service

The version of the OpenAPI document: 1.0.0
Contact: info@inoven.ai
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_new_model
#
# Create New Model
# 
# @param string $model_name Set a name for your model (required)
{
    my $params = {
    'model_name' => {
        data_type => 'string',
        description => 'Set a name for your model',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_new_model' } = { 
        summary => 'Create New Model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub create_new_model {
    my ($self, %args) = @_;

    # verify the required parameter 'model_name' is set
    unless (exists $args{'model_name'}) {
      croak("Missing the required parameter 'model_name' when calling create_new_model");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'model_name'}) {
        $query_params->{'model_name'} = $self->{api_client}->to_query_value($args{'model_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(x-api-key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_model
#
# Delete Model
# 
# @param string $model_id You can find your model ids from Classify Dashboard. (required)
{
    my $params = {
    'model_id' => {
        data_type => 'string',
        description => 'You can find your model ids from Classify Dashboard.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_model' } = { 
        summary => 'Delete Model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_model {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling delete_model");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'model_id'}) {
        $query_params->{'model_id'} = $self->{api_client}->to_query_value($args{'model_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(x-api-key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_models_list
#
# Get Models List
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_models_list' } = { 
        summary => 'Get Models List',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub get_models_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(x-api-key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tag_image_by_url
#
# Tag Image by Using Image Url
# 
# @param string $model_id Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard. (required)
# @param string $image_url Provide image url to predict (required)
{
    my $params = {
    'model_id' => {
        data_type => 'string',
        description => 'Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard.',
        required => '1',
    },
    'image_url' => {
        data_type => 'string',
        description => 'Provide image url to predict',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'tag_image_by_url' } = { 
        summary => 'Tag Image by Using Image Url',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tag_image_by_url {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling tag_image_by_url");
    }

    # verify the required parameter 'image_url' is set
    unless (exists $args{'image_url'}) {
      croak("Missing the required parameter 'image_url' when calling tag_image_by_url");
    }

    # parse inputs
    my $_resource_path = '/predict_by_image_url';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'model_id'}) {
        $query_params->{'model_id'} = $self->{api_client}->to_query_value($args{'model_id'});
    }

    # query params
    if ( exists $args{'image_url'}) {
        $query_params->{'image_url'} = $self->{api_client}->to_query_value($args{'image_url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(x-api-key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# tag_local_image
#
# Predict by Image
# 
# @param string $model_id Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard. (required)
# @param string $file  (optional)
{
    my $params = {
    'model_id' => {
        data_type => 'string',
        description => 'Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard.',
        required => '1',
    },
    'file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'tag_local_image' } = { 
        summary => 'Predict by Image',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub tag_local_image {
    my ($self, %args) = @_;

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling tag_local_image");
    }

    # parse inputs
    my $_resource_path = '/predict';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'model_id'}) {
        $query_params->{'model_id'} = $self->{api_client}->to_query_value($args{'model_id'});
    }

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(x-api-key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_model
#
# Update Model
# 
# @param string $model_name Model Name (required)
# @param string $model_id Model id to be renamed. (required)
{
    my $params = {
    'model_name' => {
        data_type => 'string',
        description => 'Model Name',
        required => '1',
    },
    'model_id' => {
        data_type => 'string',
        description => 'Model id to be renamed.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_model' } = { 
        summary => 'Update Model',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_model {
    my ($self, %args) = @_;

    # verify the required parameter 'model_name' is set
    unless (exists $args{'model_name'}) {
      croak("Missing the required parameter 'model_name' when calling update_model");
    }

    # verify the required parameter 'model_id' is set
    unless (exists $args{'model_id'}) {
      croak("Missing the required parameter 'model_id' when calling update_model");
    }

    # parse inputs
    my $_resource_path = '/models';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'model_name'}) {
        $query_params->{'model_name'} = $self->{api_client}->to_query_value($args{'model_name'});
    }

    # query params
    if ( exists $args{'model_id'}) {
        $query_params->{'model_id'} = $self->{api_client}->to_query_value($args{'model_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(x-api-key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
